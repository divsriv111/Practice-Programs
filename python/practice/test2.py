from pprint import pprint

props = ["TransactionACKCode TransactionACK ",
         "decimal? BillDistance ",
         "string BillingMethodTypeCode",
         "int? BillingMethodTypeId ",
         "int BusinessUnitId ",
         "decimal CarrierMaxPay ",
         "decimal CarrierMaxPayPercent ",
         "DateTime? CarrierPortalPostingDate ",
         "string Code ",
         "IEnumerable<Commodity> Commodities ",
         "int? CommunicationMethodTypeId ",
         "string ContactName ",
         "string ContactPhone ",
         "decimal Cost ",
         "decimal CostTransactionAmount ",
         "string CreatedBy ",
         "DateTime? CreatedDate ",
         "string CrossSellOrderNumber ",
         "CurrencyEnum Currency ",
         "string CurrencyCode ",
         "int CurrencyId ",
         "string CustomerCode ",
         "int? CustomerId ",
         "int? CustomerTypeId ",
         "IEnumerable<Note> CustomerNotes ",
         "int? CustomerServiceTypeId ",
         "string CustomsBrokerLocationCode ",
         "int? CustomsBrokerLocationId ",
         "int? DestinationStopId ",
         "decimal? Distance ",
         "int? DistanceMethodId ",
         "int? DistanceMethodTypeId ",
         "string DistanceProvider ",
         "int DistanceProviderId ",
         "string DistanceProviderMethod ",
         "decimal? DistanceProviderVersion ",
         "UnitOfMeasurementTypes DistanceUomType ",
         "string DistanceUomTypeCode ",
         "int DistanceUomTypeId ",
         "int? DistanceVersionId ",
         "bool DoNotCall ",
         "string DraftMode ",
         "string EdiImportErrors ",
         "int? EdiOriginalId ",
         "string EdiPartnerId ",
         "string EdiVersion ",
         "string EmergencyContactName ",
         "string EmergencyContactPhone ",
         "string EmergencyContactPhoneExtension ",
         "DateTime? ExchangeDateUtc ",
         "DateTime? ExportedToPegasusDate ",
         "int FinancialStatusTypeId ",
         "DateTime? FirstErpExportDate ",
         "string GeocodingPreference ",
         "decimal? GrossWeight ",
         "string HoldReason ",
         "bool IsConsolidationCandidate ",
         "bool IsCpat ",
         "bool IsCsa ",
         "bool? IsCustomerCarrierThreshold ",
         "bool IsCustomerRevenueLow ",
         "bool IsCustomsBroker ",
         "bool IsDropAndHook ",
         "bool? IsExportedToPegasus ",
         "bool IsExternalOrder ",
         "bool IsFast ",
         "bool IsHazmat ",
         "bool IsHighValue ",
         "bool IsMaxPayOverridden ",
         "bool IsOnHold ",
         "bool IsPercentageOfRevenue ",
         "bool IsPip ",
         "bool IsSmartway ",
         "bool IsTonu ",
         "bool IsTsa ",
         "bool IsTurnedBack ",
         "bool IsTwiccard ",
         "bool IsUiiacard ",
         "bool IsUncommitted ",
         "decimal? LineHaulRate ",
         "CurrencyEnum LineHaulRateCurrency ",
         "DateTime? LineHaulRateExchangeDate ",
         "decimal? LineHaulRateExchangeRate ",
         "RateMethodTypes LineHaulRateMethodType ",
         "string LineHaulRateMethodTypeCode ",
         "int LineHaulRateMethodTypeId ",
         "decimal? LineHaulRateTransactionAmount ",
         "decimal LineHaulUnits ",
         "int? LineHaulJustificationTypeId ",
         "string LineHaulJustificationComment ",
         "LTLQuickQuote LTLQuickQuote ",
         "int? LTLQuickQuoteId ",
         "DateTime? MarkedAsDeliveredDate ",
         "string MaterialCodeId ",
         "int? NetworkStatusId ",
         "IEnumerable<Note> Notes ",
         "string OfficeLocationCode ",
         "int? OfficeLocationId ",
         "IEnumerable<OrderCharge> OrderCharges ",
         "decimal OrderCharge ",
         "int OrderChargesCurrencyId ",
         "DateTime OrderChargesExchangeDate ",
         "decimal OrderChargesExchangeRate ",
         "decimal OrderChargesTransactionAmount ",
         "OrderDistancePreferenceModel OrderDistancePreference ",
         "Guid? OrderDraftId ",
         "int OrderId ",
         "IEnumerable<Requirement> OrderRequirements ",
         "OrderStatusType OrderStatusType ",
         "int OrderStatusTypeId ",
         "int? OriginStopId ",
         "bool? OverrideNotifications ",
         "string PlanningComment ",
         "string PoNumber ",
         "bool PostToCarrierPortal ",
         "OrderPrepaymentModel PrepaymentDetails ",
         "decimal Price ",
         "int PriceCurrencyId ",
         "DateTime PriceExchangeDate ",
         "decimal PriceExchangeRate ",
         "decimal PriceTransactionAmount ",
         "decimal PriceWithTaxes ",
         "decimal PriceWithTaxesTransactionAmount ",
         "RateBreakdownTypes RateBreakdownType ",
         "int? RateMethodTypeId ",
         "string RateUnitDescription ",
         "decimal? RateUnits ",
         "bool ReadyToBill ",
         "DateTime? ReadyToBillDate ",
         "int? RecommendedNonReeferEquipmentTypeId ",
         "int? RecommendedReeferEquipmentTypeId ",
         "IEnumerable<ReferenceNumber> ReferenceNumbers ",
         "string ReportingCode ",
         "int? ReportingCodeId ",
         "int? RequestedTractorEquipmentTypeId ",
         "int? RequestedTrailerEquipmentCategoryId ",
         "string RequestedTrailerEquipmentTypeCode ",
         "int? RequestedTrailerEquipmentTypeId ",
         "bool RestrictLoadPosting ",
         "string RTBOnHoldReasonCode ",
         "decimal? RuleChargesTotal ",
         "CurrencyEnum? RuleChargesTotalCurrency ",
         "DateTime? RuleChargesTotalExchangeDate ",
         "decimal? RuleChargesTotalExchangeRate ",
         "decimal? RuleChargesTotalTransactionAmount ",
         "IEnumerable<Salesperson> Salespersons ",
         "string ServiceTypeCode ",
         "int? ServiceTypeId ",
         "string ShipmentId ",
         "string SourceTypeCode ",
         "int? SourceTypeId ",
         "int? TaxableUnitId ",
         "decimal? TaxableUnitQty ",
         "IEnumerable<TaxCharge> TaxCharges ",
         "decimal Taxes ",
         "decimal TaxesTransactionAmount ",
         "string TemperatureHigh ",
         "string TemperatureLow ",
         "int? TransportClassId ",
         "int? TripCount ",
         "decimal? TripDistance ",
         "IEnumerable<Trip> Trips ",
         "string UiCulture ",
         "string UpdatedBy ",
         "DateTime? UpdatedDate ",
         "string UserName ",
         "int? UserId ",
         "decimal? ValueOfGoods ",
         "int? ValueOfGoodsCurrencyId ",
         "DateTime? ValueOfGoodsExchangeDate ",
         "decimal? ValueOfGoodsExchangeRate ",
         "decimal? ValueOfGoodsTransactionAmount ",
         "decimal? Volume ",
         "decimal? Weight ",
         "decimal TotalLineHaulAmount ",
         "IEnumerable<Stop> Stops ",
         "IEnumerable<OrderTrip> OrderTrips ",
         "bool IsBanyanImport ",
         "string AutoRateType ",
         "int? CustomerLaneId ",
         "string ContractNumber ",
         "string LaneCode ",
         "string OriginCode ",
         "string DestinationCode ",
         "bool IsOrderRequirements2Enabled ",
         "decimal TotalLineHaul ",
         "IEnumerable<OrderCharge> Accessorials ",
         "AmountValueObject ValueOfGoodsAmount "]

datatypes = ["int?", "int", "string", "double",
             "double?", "float", "float?", "bool", "bool?", "decimal", "decimal?", "DateTime?", "DateTime"]

included = []
for i in props:
    s = ''
    tmp = i.strip().split(' ')
    if tmp[0] not in datatypes:
        if tmp[0].__contains__("IEnumerable"):
            tmp2 = tmp[0].split('<')[1].replace('>', '')
            s = s = f'Field(p => p.{tmp[1]}, false, typeof(ListGraphType<{tmp2}Type>));'
        else:
            tmp[1] = tmp[1].replace('>', '')
            s = s = f'Field(p => p.{tmp[1]}, false, typeof({tmp[1]}Type));'
    elif i.__contains__('DateTime'):
        if i.__contains__('?'):
            s = f'Field<DateTimeGraphType>(p => p.{tmp[1]});'
        else:
            s = s = f'Field<NonNullGraphType<DateTimeGraphType>>(p => p.{tmp[1]});'
    elif i.__contains__('string') or i.__contains__('?'):
        s = f'Field(p => p.{tmp[1]}, true);'

    else:
        s = f'Field(p => p.{tmp[1]});'
    included.append(s)


for i in included:
    print(i)
# pprint(leftovers)
